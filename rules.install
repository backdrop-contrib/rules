<?php
/**
 * @file
 * Rules - Installation file.
 */

/**
 * Implements hook_requirements().
 */
function rules_requirements($phase) {
  $requirements = array();
  if ($phase == 'update') {
    // Required Backdrop modules that were not part of D7 installation.
    $backdrop_modules = array(
      'entity_ui' => 'Entity UI',
      'entity_plus' => 'Entity Plus',
    );
    foreach ($backdrop_modules as $module => $module_name) {
      if (module_exists($module)) {
        // The module is already installed and enabled, nothing more to do.
        continue;
      }
      $module_files = backdrop_system_listing('/^' . $module . '\.module$/', 'modules', 'name', 0);
      if (empty($module_files)) {
        // Module doesn't exist in the code base, so halt the upgrade process.
        $requirements[] = array(
          'title' => $module_name,
          'description' => t('Please add the Backdrop module @module_name to your installation; it is required for the Rules module.', array('@module_name' => $module_name)),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      else {
        // Module exists in the code base, but isn't enabled so enable it.
        module_enable(array($module));
        $requirements[] = array(
          'title' => $module_name,
          'description' => t('The Backdrop module @module_name has been enabled; it is required for the Rules module.', array('@module_name' => $module_name)),
          'severity' => REQUIREMENT_OK,
        );
      }
    }
  }
  return $requirements;
}

/**
 * Implements hook_enable().
 */
function rules_enable() {
  // Enable evaluation of Rules right after enabling the module.
  rules_event_invocation_enabled(TRUE);
}

/**
 * Implements hook_install().
 */
function rules_install() {
  module_load_include('inc', 'rules', 'modules/events');
  // Set the modules' weight to 20, see
  // https://www.drupal.org/node/445084#comment-1533280 for the reasoning.
  db_query("UPDATE {system} SET weight = 20 WHERE name = 'rules'");
}

/**
 * Implements hook_schema().
 */
function rules_schema() {
  $schema['rules_config'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'The internal identifier for any configuration.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
        'description' => 'The name of the configuration.',
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'The label of the configuration.',
        'default' => 'unlabeled',
      ),
      'plugin' => array(
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'description' => 'The name of the plugin of this configuration.',
      ),
      'active' => array(
        'description' => 'Boolean indicating whether the configuration is active. Usage depends on how the using module makes use of it.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Weight of the configuration. Usage depends on how the using module makes use of it.',
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'dirty' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Dirty configurations fail the integrity check, e.g. due to missing dependencies.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'owner' => array(
        'description' => 'The name of the module via which the rule has been configured.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'rules',
      ),
      'access_exposed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Whether to use a permission to control access for using components.',
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => FALSE,
        'serialize' => TRUE,
        'description' => 'Everything else, serialized.',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
    'indexes' => array(
      'plugin' => array('plugin', 'active'),
    ),
  );
  $schema['rules_trigger'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The primary identifier of the configuration.',
      ),
      'event' => array(
        'type' => 'varchar',
        'length' => '127',
        'not null' => TRUE,
        'default' => '',
        'description' => 'The name of the event on which the configuration should be triggered.',
      ),
    ),
    'primary key' => array('id', 'event'),
    'foreign keys' => array(
      'table' => 'rules_config',
      'columns' => array('id' => 'id'),
    ),
  );
  $schema['rules_tags'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The primary identifier of the configuration.',
      ),
      'tag' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'The tag string associated with this configuration',
      ),
    ),
    'primary key' => array('id', 'tag'),
    'foreign keys' => array(
      'table' => 'rules_config',
      'columns' => array('id' => 'id'),
    ),
  );
  $schema['rules_dependencies'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The primary identifier of the configuration.',
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'The name of the module that is required for the configuration.',
      ),
    ),
    'primary key' => array('id', 'module'),
    'indexes' => array(
      'module' => array('module'),
    ),
    'foreign keys' => array(
      'table' => 'rules_config',
      'columns' => array('id' => 'id'),
    ),
  );
  $schema['cache_rules'] = backdrop_get_schema_unprocessed('system', 'cache');
  $schema['cache_rules']['description'] = 'Cache table for the rules engine to store configured items.';
  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function rules_update_last_removed() {
  return 7214;
}

/**
 * Move Rules settings from variables to config.
 */
function rules_update_1000() {
  // Migrate variables to config.
  $config = config('rules.settings');
  $config->set('rules_log_errors', update_variable_get('rules_log_errors', RulesLog::WARN));
  $config->set('rules_log_level', update_variable_get('rules_log_level', RulesLog::INFO));
  $config->set('rules_debug_log', update_variable_get('rules_debug_log', 0));
  $config->set('rules_debug', update_variable_get('rules_log_debug', RulesLog::WARN));
  $config->set('rules_path_cleaning_callback', update_variable_get('rules_path_cleaning_callback', 'rules_path_default_cleaning_method'));
  $config->set('rules_path_replacement_char', update_variable_get('rules_path_replacement_char', '-'));
  $config->set('rules_path_lower_case', update_variable_get('rules_path_lower_case', TRUE));
  $config->set('rules_clean_path', update_variable_get('rules_clean_path', array('/[^a-zA-Z0-9\-_]+/', '-')));
  $config->set('rules_path_transliteration', update_variable_get('rules_path_transliteration', TRUE));
  $config->save();

  // Delete variables.
  update_variable_del('rules_log_errors');
  update_variable_del('rules_log_level');
  update_variable_del('rules_debug_log');
  update_variable_del('rules_debug');
  update_variable_del('rules_debug_region');
  update_variable_del('theme_default');
  update_variable_del('admin_theme');
  update_variable_del('rules_path_cleaning_callback');
  update_variable_del('rules_path_replacement_char');
  update_variable_del('rules_path_lower_case');
  update_variable_del('rules_clean_path');
  update_variable_del('rules_path_transliteration');
  update_variable_del('site_mail');
}

/**
 * Remove settings that are now obtained from system.core.
 */
function rules_update_1001() {
  $config = config('rules.settings');
  $config->clear('theme_default');
  $config->clear('admin_theme');
  $config->clear('site_mail');
  $config->save();
}

/**
 * Deprecate 'rules_clean_path' config variable in favor of 'rules_path_regex'.
 */
function rules_update_1002() {
  $rules_clean_path = config_get('rules.settings', 'rules_clean_path');
  if (is_array($rules_clean_path) && count($rules_clean_path) == 2) {
    config_set('rules.settings', 'rules_path_regex', $rules_clean_path[0]);
  }
  else {
    config_set('rules.settings', 'rules_path_regex', '/[^a-zA-Z0-9\-_]+/');
  }
  config_clear('rules.settings', 'rules_clean_path');
}

/**
 * Remove superfluous config variable 'language_content_type_page'.
 */
function rules_update_1003() {
  $config = config('rules.settings');
  $config->clear('language_content_type_page');
  $config->save();
}
